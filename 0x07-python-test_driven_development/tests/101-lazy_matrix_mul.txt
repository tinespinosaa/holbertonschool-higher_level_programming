The ``101-lazy_matrix_mul`` module
============================

Using ``lazy_matrix_mul``
---------------------

Importing function from the module:

    >>> matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

checking Multiplying two matrices:
    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
    array([[ 7, 10],
     	   [15, 22]])

checking Multiplying two matrices 2:
    >>> matrix_mul([[1, 2]], [[3, 4], [5, 6]])
    array([[13, 16]])

checking Multiplying two matrices 3:
    >>> list1 = [[5, 3, 2], [9, 6, 3], [1, 4, 7]]
    >>> list2 = [[8, 9, -5], [2, -3, 3], [-4, 6, 1]]
    >>> matrix_mul(list1, list2)
    array([[38, 48, -14],
	  [72, 81, -24],
	  [-12, 39, 14]])

checking Multiplying two matrices 4:
    >>> matrix_mul([[2, 4, 6]], [[1], [3], [5]])
    array([[44]])

checking Passing None as a matrix:
    >>> matrix_mul(None, None)
    Traceback (most recent call last):
    	      ...
    TypeError: Object arrays are not currently supported

checking Passing None as a matrix:
    >>> matrix_mul([[7, 12]], None)
    Traceback (most recent call last):
    	      ...
    TypeError: Object arrays are not currently supported

checking Passing a tuple as a matrix:
    >>> matrix_mul((1, 3, 5), [[1.3], [5.2], [7.7]])
    array([55.4])

checking Passing a string as a matrix:
    >>> matrix_mul([[21, 12], [3, 11]], "School")
    Traceback (most recent call last):
    	      ...
    ValueError: Scalar operands are not allowed, use '*' instead

checking Passing a list of tuples:
   >>> matrix_mul([(2, 2, 10)], [(3), (10)])
   Traceback (most recent call last):
   	     ...
   ValueError: shapes (1,3) and (2,) not aligned: 3 (dim 1) != 2 (dim 0)

checking Passing a list of string:
   >>> matrix_mul([[]], ["school"])
   Traceback (most recent call last):
   	     ...
   ValueError: shapes (1,0) and (1,) not aligned: 0 (dim 1) != 1 (dim 0)

checking Passing an empty matrix:
    >>> matrix_mul([], [[33]])
    Traceback (most recent call last):
    	      ...
    ValueError: shapes (0,) and (1,1) not aligned: 0 (dim 0) != 1 (dim 0)

checking Passing an empty matrix 2:
    >>> matrix_mul([[1, 2]], [[]])
    Traceback (most recent call last):
    	      ...
    ValueError: shapes (1,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)

checking Passing a matrix with a list of strings:
    >>> matrix_mul([[2, 4, 6], [3, 6, 9]], [[1], ['2'], [3]])
    Traceback (most recent call last):
    	      ...
    TypeError: invalid data type for einsum

checking Passing a matrix with an empty list:
    >>> matrix_mul([[3, 4, 5], [], [6, 7, 8]], [[8], [9], [10]])
    Traceback (most recent call last):
    	      ...
    ValueError: setting an array element with a sequence.

checking Passing a matrix which its rows have different size:
    >>> matrix_mul([[4, 6, 8], [1, 3, 5]], [[2], [6, 2]])
    Traceback (most recent call last):
    	      ...
    ValueError: setting an array element with a sequence.

checking Passing two matrix that can't be multiplied:
    >>> matrix_mul([[3, 3, 3], [1, 1, 1], [4, 4, 4]], [[9, 3], [4, 1]])
    Traceback (most recent call last):
    	      ...
    ValueError: shapes (3,3) and (2,2) not aligned: 3 (dim 1) != 2 (dim 0)

checking Missing one argument:
    >>> matrix_mul([[55, 10]])
    Traceback (most recent call last):
    	            ...
    TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

checking Missing arguments:
    >>> matrix_mul()
    Traceback (most recent call last):
    	            ...
    TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'
